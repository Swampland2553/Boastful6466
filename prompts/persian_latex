
این هم یک یادداشت برای مراجعات بعدی، مخصوصاً وقتی با بسته tasks و xepersian کار می‌کنیم:

یادداشت برای کار با بسته `tasks` و `xepersian` (مخصوصاً برای سوالات چندگزینه‌ای فارسی):

1.  شماره‌گذاری گزینه‌ها (مهم‌ترین نکته):
    *   مشکل رایج: استفاده مستقیم از حروف فارسی و پرانتز در تعریف label داخل \settasks (مثلاً label=\الف),) باعث خطای Undefined control sequence می‌شود.
    *   راه‌حل صحیح: از شمارنده‌های استاندارد LaTeX در label استفاده کن. بسته xepersian خودش آن‌ها را به فارسی تبدیل می‌کند.
        *   مثال: label=\alph*), (برای الف)، ب)، پ)، ...)
        *   مثال: label=\Alph*). (برای الف.)، ب.)، پ.)، ... اگر حروف بزرگ بخواهیم، هرچند در فارسی معمولاً حروف کوچک استفاده می‌شود)
        *   مثال: label=\arabic*.) (برای ۱.)، ۲.)، ۳.)، ...)
    *   نتیجه: لاتک خطا نمی‌دهد و شماره‌گذاری به درستی فارسی می‌شود.

2.  تورفتگی گزینه‌ها (`item-indent`):
    *   مشکل رایج: هشدار item-indent is too small اگر این مقدار خیلی کم یا صفر باشد و label-width (عرض برچسب گزینه) قابل توجه باشد.
    *   راه‌حل: یک مقدار منطقی برای item-indent در \settasks تنظیم کن (مثلاً item-indent=1em یا item-indent=1.5em). این مقدار باید به اندازه‌ای باشد که برچسب گزینه (مثلاً "الف)") به راحتی جا شود.
    *   label-width را هم متناسب با طولانی‌ترین برچسب گزینه‌ات (مثلاً "الف)" یا "۱.") تنظیم کن (مثلاً label-width=2em).

3.  تعیین تعداد ستون‌ها برای گزینه‌ها:
    *   اشتباه رایج: تلاش برای تنظیم تعداد ستون‌های پیش‌فرض با گزینه‌ای مثل columns=n *داخل* \settasks. این کار باعث خطای The key 'tasks/list/columns' is unknown می‌شود.
    *   راه‌حل صحیح: تعداد ستون‌ها به عنوان یک آرگومان اختیاری *موقع شروع خود محیط tasks* داده می‌شود.
        *   مثال: \begin{tasks}(2) برای چیدن گزینه‌ها در ۲ ستون.
        *   مثال: \begin{tasks}(1) برای چیدن گزینه‌ها در ۱ ستون.
        *   مثال: \begin{tasks} (بدون آرگومان) معمولاً در ۱ ستون می‌چیند (بسته به پیش‌فرض خود بسته tasks).

4. نکته فراگیر و بسیار مهم: ترتیب بارگذاری `xepersian`

به عنوان یک قاعده کلی بسیار قوی، بسته xepersian باید تقریباً آخرین بسته‌ای باشد که در `preamble` (مقدمه سند) خود فراخوانی می‌کنید.

*   دلیل اصلی: بسته xepersian (و بسته bidi که به طور خودکار فراخوانی می‌کند) تغییرات اساسی و گسترده‌ای در نحوه پردازش متن، فونت‌ها، و تعامل با سایر بسته‌ها ایجاد می‌کند تا از زبان فارسی و نوشتار راست‌به‌چپ به درستی پشتیبانی کند. برای اینکه این تغییرات به درستی روی بسته‌های دیگر اعمال شوند و تداخلی پیش نیاید، آن بسته‌ها (مانند amsmath, color, graphicx, hyperref و بسیاری دیگر) باید *قبل* از xepersian بارگذاری شده باشند.
*   ترتیب پیشنهادی:
    1.  بسته‌های عمومی استاندارد (مانند amsmath, amsfonts, graphicx, color, geometry, enumitem, tasks, siunitx و غیره).
    2.  بسته hyperref (اگر استفاده می‌کنید، معمولاً توصیه می‌شود که این بسته هم یکی از آخرین بسته‌های *عمومی* باشد، یعنی درست قبل از xepersian).
    3.  بسته `xepersian`.
    4.  دستورات تنظیم فونت مربوط به xepersian (مانند \settextfont, \setdigitfont).
    5.  دستورات تنظیم سایر بسته‌ها که ممکن است به فونت‌های فارسی وابستگی داشته باشند (مانند \sisetup برای siunitx).
*   استثناها: بسته‌های بسیار خاصی که صراحتاً ذکر شده باید *بعد* از xepersian بارگذاری شوند (این موارد نادر هستند).
*   نتیجه: رعایت این نکته از بروز اکثر خطاهای مربوط به loaded package X after bidi package جلوگیری می‌کند و پایداری سند شما را افزایش می‌دهد.

این قاعده، نکته ۴ قبلی ("همیشه بسته xepersian را *بعد* از بسته‌های عمومی دیگر...") و نکته تکمیلی در مورد amsmath را در بر می‌گیرد و آن‌ها را به شکل جامع‌تری بیان می‌کند.
نکته تکمیلی در مورد ترتیب بارگذاری (مرتبط با نکته ۴ فراگیر): آگاهی از بارگذاری ضمنی بسته‌ها

*   مشکل: حتی اگر شما تمامی بسته‌های خود را به ترتیب صحیح (بسته‌های عمومی سپس xepersian) فراخوانی کنید، گاهی اوقات برخی بسته‌ها (مانند color یا بخش‌هایی از graphics) ممکن است به طور *ضمنی* یا *خودکار* توسط کلاس سند یا سایر بسته‌ها در مراحل بعدی پردازش (مثلاً هنگام \begin{document}) بارگذاری شوند. اگر این بارگذاری ضمنی بعد از xepersian رخ دهد، همچنان منجر به خطای تداخل با bidi خواهد شد.
*   راه‌حل پیشگیرانه: اگر احتمال می‌دهید که از قابلیت‌های یک بسته خاص (مثلاً رنگ، گرافیک، یا برخی امکانات ریاضی) استفاده خواهید کرد، حتی اگر دستورات مستقیم آن بسته را فوراً استفاده نمی‌کنید، آن بسته را به طور صریح و در جایگاه صحیح (قبل از `xepersian`) در `preamble` خود فراخوانی کنید. این کار اطمینان می‌دهد که بسته مورد نظر قبل از bidi آماده شده و از بروز خطاهای ناشی از بارگذاری دیرهنگام و خودکار جلوگیری می‌کند.
    *   مثال: حتی اگر بلافاصله از \textcolor استفاده نمی‌کنید، اما ممکن است در ادامه سند یا توسط یک بسته دیگر به رنگ نیاز باشد، \usepackage{color} را قبل از \usepackage{xepersian} قرار دهید.

5.  فونت:
    *   مطمئن شو فونتی که با \settextfont (مثلاً Amiri) مشخص می‌کنی، روی سیستم نصب شده باشد.

6.  کامپایل:
    *   فایل .tex باید با XeLaTeX (یا LuaLaTeX) کامپایل شود.

خلاصه کلیدی:
برای \settasks:
label -> از شمارنده‌های استاندارد لاتک (\alph*, \arabic*) استفاده کن.
item-indent و label-width -> مقادیر منطقی بده.
برای \begin{tasks}:
\begin{tasks}(n) -> برای تعیین n ستون.

**نکته ۷ (اصلاح شده): کار با اعداد اعشاری و ممیز فارسی (تأکید بر `siunitx`)**

هنگام کار با اعداد اعشاری در متون فارسی با `xepersian`، **روش اکیداً توصیه شده** استفاده از بسته قدرتمند `siunitx` است. این بسته کنترل دقیق و یکنواختی بر نمایش اعداد، واحدها و ممیز اعشاری فراهم می‌کند.

**الف) روش اصلی و توصیه شده: استفاده از بسته `siunitx`**

بسته `siunitx` ابزار بسیار قدرتمندی برای نمایش استاندارد اعداد، واحدها، و اعداد اعشاری است. برای استفاده صحیح در محیط فارسی:

1.  **بارگذاری بسته:**
    *   بسته `siunitx` باید *قبل* از بسته `xepersian` در `preamble` (مقدمه سند) فراخوانی شود:
        ```latex
        \usepackage{siunitx}
        % ... سایر بسته‌های عمومی ...
        \usepackage{xepersian}
        ```

2.  **تنظیمات `siunitx` (بعد از `xepersian` و تنظیمات فونت):**
    دستورات `\sisetup` باید *بعد* از `\usepackage{xepersian}` و دستورات تنظیم فونت (مانند `\settextfont` و `\setdigitfont`) قرار گیرند تا از فونت دیجیتال فارسی صحیح استفاده کنند.

    *   **تنظیم ممیز اعشاری (`output-decimal-marker`):**
        *   راه‌حل صحیح و آزمایش‌شده: برای نمایش صحیح ممیز فارسی (٫) در خروجی دستور `\num{}`، از دستور `\text{}` در تنظیمات `siunitx` استفاده کنید:
            ```latex
            \sisetup{output-decimal-marker = {\text{٫}}}
            ```
            این روش تضمین می‌کند که کاراکتر ممیز فارسی با فونت متن فارسی (که توسط `xepersian` تنظیم شده) به درستی پردازش و نمایش داده می‌شود.

    *   **تنظیم ورودی اعداد اعشاری (`input-decimal-markers`):**
        *   برای راحتی در تایپ، می‌توانید به `siunitx` بگویید که هم نقطه انگلیسی (`.`) و هم ممیز فارسی (`٫`) را به عنوان جداکننده اعشار در ورودی دستور `\num{}` بپذیرد:
            ```latex
            \sisetup{input-decimal-markers = {.٫}}
            ```
            با این تنظیم، چه `\num{12.34}` بنویسید و چه `\num{۱۲٫۳۴}`، خروجی با ممیز فارسی خواهد بود.

    *   **تنظیم جداکننده هزارگان (`group-separator`) (اختیاری):**
        *   برای ویرگول فارسی (٬):
            ```latex
            \sisetup{group-separator = {\text{٬}}}
            ```
        *   برای فاصله باریک (توصیه تایپوگرافیک رایج):
            ```latex
            \sisetup{group-separator = {\,}}
            ```
        *   فعال‌سازی:
            ```latex
            \sisetup{group-digits = true, group-minimum-digits = 4}
            ```

    *   **سایر تنظیمات مفید `siunitx`:**
        ```latex
        \sisetup{
          detect-all, % به siunitx کمک می‌کند تنظیمات فونت و جهت را از محیط اطراف تشخیص دهد
          mode = text   % اطمینان از اینکه اعداد در حالت متن پردازش می‌شوند (مهم برای فارسی)
        }
        ```
        مثال کامل تنظیمات:
        ```latex
        \sisetup{
          detect-all,
          mode = text,
          output-decimal-marker = {\text{٫}},
          input-decimal-markers = {.٫},
          group-separator = {\,}, % یا \text{٬}
          group-digits = true,
          group-minimum-digits = 4
        }
        ```

3.  **استفاده در متن:**
    *   اعداد اعشاری (و حتی صحیح) را با دستور `\num{}` وارد کنید:
        *   `\num{12.75}` خروجی می‌دهد: `۱۲٫۷۵`
        *   `\num{0.5}` خروجی می‌دهد: `۰٫۵`
        *   `\num{12345.67}` (با تنظیم جداکننده هزارگان) خروجی می‌دهد: `۱۲٬۳۴۵٫۶۷` (اگر ویرگول فارسی انتخاب شده باشد) یا `۱۲۳۴۵٫۶۷` (اگر فاصله باریک انتخاب شده باشد و به درستی رندر شود).

**ب) روش‌های جایگزین (با احتیاط و برای موارد خاص)**

این روش‌ها ممکن است در شرایط خاصی کار کنند اما به اندازه `siunitx` قابل اعتماد و انعطاف‌پذیر نیستند و ممکن است منجر به نتایج غیرمنتظره شوند.

1.  **تایپ مستقیم ممیز فارسی (٫) در متن عادی:**
    *   مثال: `۱۲٫۷۵`
    *   **ملاحظات:**
        *   این روش ممکن است برای اعداد بسیار ساده و بدون نیاز به قالب‌بندی خاص کار کند.
        *   وابستگی زیادی به پشتیبانی صحیح فونت از کاراکتر ممیز فارسی (U+066B) و پردازشگر TeX دارد.
        *   ممکن است در ترکیب با دستورات دیگر یا در محیط‌های پیچیده مشکل‌ساز شود.
        *   **توصیه نمی‌شود** به عنوان روش اصلی برای اسناد حرفه‌ای یا پیچیده.

2.  **استفاده از محیط ریاضی (با نقطه انگلیسی):**
    *   مثال: `$12.75$`
    *   **ملاحظات:**
        *   این روش عدد را به صورت چپ‌به‌راست و معمولاً با ارقام و ممیز انگلیسی نمایش می‌دهد.
        *   برای نمایش ارقام فارسی و ممیز فارسی در محیط ریاضی، نیاز به تنظیمات پیشرفته‌تر فونت ریاضی فارسی (مانند `\setmathdigitfont` با فونتی که از این قابلیت پشتیبانی کند) و احتمالاً بسته‌های کمکی است که پیچیدگی را افزایش می‌دهد.
        *   عموماً برای نمایش اعداد اعشاری فارسی در متن اصلی مناسب نیست.

**خلاصه توصیه اکید برای اعداد اعشاری فارسی:**

1.  **همیشه از بسته `siunitx` استفاده کنید.**
2.  بسته `siunitx` را **قبل** از `xepersian` بارگذاری کنید.
3.  تنظیمات `\sisetup` (مخصوصاً `output-decimal-marker = {\text{٫}}`) را **بعد** از `xepersian` و `\setdigitfont` انجام دهید.
4.  اعداد خود را با دستور `\num{}` در متن وارد کنید.

این رویکرد بهترین سازگاری، کنترل و کیفیت تایپوگرافیک را برای اعداد اعشاری فارسی در اسناد LaTeX شما فراهم می‌کند.
......


---

**یادداشت مهم: نمایش کاراکترهای ویژه و دستورات LaTeX به صورت تحت‌اللفظی در متن**

**موضوع:**
هنگامی که می‌خواهیم خودِ کاراکترهای خاص لاتک (مانند `_`, `^`, `{`, `}`, `\`) یا نام یک دستور لاتک (مانند `\usepackage` یا `\ce`) را در متن خروجی نمایش دهیم، نه اینکه لاتک آن‌ها را به عنوان دستور یا عملگر تفسیر و اجرا کند، باید از روش‌های خاصی استفاده کنیم. استفاده مستقیم از این کاراکترها یا دستورات در متن عادی، حتی داخل `\texttt{...}`، می‌تواند منجر به خطا شود.

**مشکل رایج:**
1.  **کاراکترهای ویژه ریاضی/ساختاری:**
    *   `_` (آندرلاین): برای اندیس در حالت ریاضی.
    *   `^` (هشتک/توان): برای توان در حالت ریاضی.
    *   `{` و `}`: برای گروه‌بندی آرگومان‌ها.
    *   `\` (بک‌اسلش): برای شروع یک دستور.
    *   `$` : برای ورود/خروج از حالت ریاضی خطی.
    *   `&` : برای جداول و هم‌ترازی.
    *   `#` : برای تعریف آرگومان‌های دستورات جدید.
    *   `%` : برای شروع توضیحات (کامنت).
    *   `~` : برای ایجاد فاصله نشکن (non-breaking space).
    استفاده از این‌ها خارج از زمینه مورد انتظارشان (مثلاً `_` یا `^` خارج از محیط ریاضی) باعث خطای `Missing $ inserted` یا خطاهای مشابه می‌شود.

2.  **دستورات لاتک:**
    *   تایپ دستوری مانند `\usepackage{somepackage}` مستقیماً در متن، باعث می‌شود لاتک تلاش کند آن دستور را *اجرا* کند. اگر این دستور در جای نامناسبی باشد (مثلاً `\usepackage` در بدنه سند)، خطای `Can be used only in preamble` یا خطاهای دیگر رخ می‌دهد.

**راه‌حل‌ها:**

1.  **برای نمایش کاراکترهای ویژه منفرد:**
    قبل از کاراکتر ویژه، یک بک‌اسلش (`\`) قرار دهید. این کار باعث "خنثی شدن" معنای خاص آن کاراکتر می‌شود.
    *   `\_` نمایش می‌دهد: `_`
    *   `\^` نمایش می‌دهد: `^` (توجه: برای نمایش بهتر، گاهی `\^{}` لازم است)
    *   `\{` نمایش می‌دهد: `{`
    *   `\}` نمایش می‌دهد: `}`
    *   `\$` نمایش می‌دهد: `$`
    *   `\&` نمایش می‌دهد: `&`
    *   `\#` نمایش می‌دهد: `#`
    *   `\%` نمایش می‌دهد: `%`
    *   `\~` (معمولاً برای ایجاد مدک روی حروف استفاده می‌شود، برای نمایش خود تیلدا بهتر است از `\texttt{\~{}}` یا `$\sim$` در حالت ریاضی استفاده شود، یا `\textasciitilde` اگر بسته `textcomp` فعال باشد).
    *   `\textbackslash` نمایش می‌دهد: `\`

2.  **برای نمایش نام یک دستور لاتک (بدون اجرای آن):**
    از دستور `\string` قبل از نام دستور مورد نظر استفاده کنید. `\string` باعث می‌شود دستور بعدی به صورت یک رشته متنی چاپ شود.
    *   `\string\ce` نمایش می‌دهد: `\ce`
    *   `\string\usepackage` نمایش می‌دهد: `\usepackage`

3.  **ترکیب با `\texttt{...}` برای ظاهر کد:**
    برای اینکه این کاراکترها و دستورات با فونت مونواسپیس (شبیه کد) نمایش داده شوند، آن‌ها را داخل `\texttt{...}` قرار دهید و *همچنان* از روش‌های بالا برای خنثی‌سازی استفاده کنید:
    *   `\texttt{\_}`
    *   `\texttt{\^}` (یا `\texttt{\^{}}`)
    *   `\texttt{\{}`
    *   `\texttt{\}}`
    *   `\texttt{\string\ce}`
    *   `\texttt{\string\usepackage\{mhchem\}}` (توجه کنید که `{` و `}` مربوط به آرگومان `mhchem` نیز باید با `\{` و `\}` خنثی شوند).

**مثال کامل از مشکل و راه‌حل:**
*   **نادرست (باعث خطا):** `در دستور \texttt{\ce{Fe^3+}} ...`
*   **صحیح:** `در دستور \texttt{\string\ce\{Fe\^3+\}} ...`

**چرا این مهم است؟**
لاتک یک زبان نشانه‌گذاری است و کاراکترهای خاص معنای ویژه‌ای برای کامپایلر دارند. برای اینکه به لاتک بگوییم "این کاراکتر را همانطور که هست چاپ کن و تفسیر نکن"، باید از این مکانیزم‌های خنثی‌سازی (escaping) استفاده کنیم. دستور `\texttt` فقط فونت را تغییر می‌دهد و به تنهایی معنای خاص کاراکترها را از بین نمی‌برد.

---

